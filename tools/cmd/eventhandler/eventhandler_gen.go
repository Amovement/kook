package main

import (
	"bytes"
	"fmt"
	"go/format"
	"go/parser"
	"go/token"
	"io/ioutil"
	"log"
	"path/filepath"
	"regexp"
	"sort"
	"strings"
	"text/template"
)

var eventHandlerTmpl = template.Must(template.New("kkk").Funcs(map[string]interface{}{
	"privateName": privateName,
}).Parse(`// Code generated by eventhandler generator
// See system_events.go

package khl

{{range .SystemName}}{{ $n := . }}
// {{$n}}EventHandler is an event handler for System Message Event ({{with index $.Event $n}}{{.DocName}}{{end}}).
type {{$n}}EventHandler func(*Session, *EventDataGeneral, *{{$n}})

// Type returns the event type for {{$n}} ({{with index $.Event $n}}{{.DocName}}{{end}})
func (eh {{$n}}EventHandler) Type() string {
	return "{{with index $.Event $n}}{{.Identifier}}{{end}}"
}

// New returns a new instance of {{$n}} ({{with index $.Event $n}}{{.DocName}}{{end}}).
func (eh {{$n}}EventHandler) New() interface{} {
	return &{{$n}}{}
}

// Handle is the handler for {{$n}} ({{with index $.Event $n}}{{.DocName}}{{end}}).
func (eh {{$n}}EventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*{{$n}}); ok {
		eh(s, edg, t)
	}
}
{{end}}

{{range .MessageName}}{{ $n := . }}
// {{$n}}EventHandler is an event handler for Common Message Event ({{with index $.Event $n}}{{.DocName}}{{end}}).
type {{$n}}EventHandler func(*Session, *EventDataGeneral, *{{$n}})

// Type returns the event type for {{$n}} ({{with index $.Event $n}}{{.DocName}}{{end}}).
func (eh {{$n}}EventHandler) Type() string {
	return "{{with index $.Event $n}}{{.Identifier}}{{end}}"
}

// New returns a new instance of {{$n}} ({{with index $.Event $n}}{{.DocName}}{{end}}).
func (eh {{$n}}EventHandler) New() interface{} {
	return &{{$n}}{}
}

// Handle is the handler for {{$n}} ({{with index $.Event $n}}{{.DocName}}{{end}}).
func (eh {{$n}}EventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*{{$n}}); ok {
		eh(s, edg, t)
	}
}
{{end}}

func handlerForInterface(h interface{}) EventHandler {
	switch v:= h.(type) { {{range .SystemName}}
		case func(*Session, *EventDataGeneral, *{{.}}):
			return {{.}}EventHandler(v){{end}}{{range .MessageName}}
		case func(*Session, *EventDataGeneral, *{{.}}):
			return {{.}}EventHandler(v){{end}}
	}
	return nil
}

func init() { {{range .SystemName}}
	registerSystemEventHandler({{.}}EventHandler(nil)){{end}}{{range .MessageName}}
	registerMessageEventHandler({{.}}EventHandler(nil)){{end}}
}
`))

var reg = regexp.MustCompile(`'.*'`)

func main() {
	a := struct {
		SystemName  []string
		Event       map[string]handler
		MessageName []string
	}{}

	a.Event = make(map[string]handler)
	fs := token.NewFileSet()
	parsedFile, err := parser.ParseFile(fs, "system_events.go", nil, parser.ParseComments)
	if err != nil {
		log.Fatalf(err.Error())
		return
	}
	for i, x := range parsedFile.Comments {
		if i == 0 {
			continue
		}
		name := strings.SplitN(x.List[0].Text, " ", 3)[1]
		d := reg.FindString(x.List[0].Text)
		t := strings.SplitN(x.List[len(x.List)-1].Text, " ", 3)[1]
		h := handler{d[1 : len(d)-1],
			t,
		}
		a.SystemName = append(a.SystemName, name)
		a.Event[name] = h
	}
	fs = token.NewFileSet()
	parsedFile, err = parser.ParseFile(fs, "message_events.go", nil, parser.ParseComments)
	if err != nil {
		log.Fatalf(err.Error())
		return
	}
	for _, x := range parsedFile.Comments {
		name := strings.SplitN(x.List[0].Text, " ", 3)[1]
		d := reg.FindString(x.List[0].Text)
		t := strings.SplitN(x.List[len(x.List)-1].Text, " ", 3)[1]
		h := handler{d[1 : len(d)-1],
			t,
		}
		a.MessageName = append(a.MessageName, name)
		a.Event[name] = h
	}
	sort.Strings(a.SystemName)
	sort.Strings(a.MessageName)

	var buf bytes.Buffer
	err = eventHandlerTmpl.Execute(&buf, a)
	if err != nil {
		fmt.Println(buf.String())
		panic(err)
	}
	src, err := format.Source(buf.Bytes())
	if err != nil {
		log.Println("warning: internal error: invalid Go generated:", err)
		src = buf.Bytes()
	}

	err = ioutil.WriteFile(filepath.Join(filepath.Dir("."), strings.ToLower("eventhandlers.go")), src, 0644)
	if err != nil {
		log.Fatal(buf, "writing output: %s", err)
	}
}

func privateName(s string) string {
	return strings.ToLower(string(s[0])) + s[1:]
}

type handler struct {
	DocName    string
	Identifier string
}
