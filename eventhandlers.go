// Code generated by eventhandler generator
// See system_events.go

package khl

// BotGuildAddEventHandler is an event handler for System Message Event (自己新加入服务器).
type BotGuildAddEventHandler func(*Session, *EventDataGeneral, *BotGuildAdd)

// Type returns the event type for BotGuildAdd (自己新加入服务器)
func (eh BotGuildAddEventHandler) Type() string {
	return "self_joined_guild"
}

// New returns a new instance of BotGuildAdd (自己新加入服务器).
func (eh BotGuildAddEventHandler) New() interface{} {
	return &BotGuildAdd{}
}

// Handle is the handler for BotGuildAdd (自己新加入服务器).
func (eh BotGuildAddEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*BotGuildAdd); ok {
		eh(s, edg, t)
	}
}

// BotGuildRemoveEventHandler is an event handler for System Message Event (自己退出服务器).
type BotGuildRemoveEventHandler func(*Session, *EventDataGeneral, *BotGuildRemove)

// Type returns the event type for BotGuildRemove (自己退出服务器)
func (eh BotGuildRemoveEventHandler) Type() string {
	return "self_exited_guild"
}

// New returns a new instance of BotGuildRemove (自己退出服务器).
func (eh BotGuildRemoveEventHandler) New() interface{} {
	return &BotGuildRemove{}
}

// Handle is the handler for BotGuildRemove (自己退出服务器).
func (eh BotGuildRemoveEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*BotGuildRemove); ok {
		eh(s, edg, t)
	}
}

// CardButtonClickEventHandler is an event handler for System Message Event (Card消息中的Button点击事件).
type CardButtonClickEventHandler func(*Session, *EventDataGeneral, *CardButtonClick)

// Type returns the event type for CardButtonClick (Card消息中的Button点击事件)
func (eh CardButtonClickEventHandler) Type() string {
	return "message_btn_click"
}

// New returns a new instance of CardButtonClick (Card消息中的Button点击事件).
func (eh CardButtonClickEventHandler) New() interface{} {
	return &CardButtonClick{}
}

// Handle is the handler for CardButtonClick (Card消息中的Button点击事件).
func (eh CardButtonClickEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*CardButtonClick); ok {
		eh(s, edg, t)
	}
}

// ChannelAddEventHandler is an event handler for System Message Event (新增频道).
type ChannelAddEventHandler func(*Session, *EventDataGeneral, *ChannelAdd)

// Type returns the event type for ChannelAdd (新增频道)
func (eh ChannelAddEventHandler) Type() string {
	return "added_channel"
}

// New returns a new instance of ChannelAdd (新增频道).
func (eh ChannelAddEventHandler) New() interface{} {
	return &ChannelAdd{}
}

// Handle is the handler for ChannelAdd (新增频道).
func (eh ChannelAddEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*ChannelAdd); ok {
		eh(s, edg, t)
	}
}

// ChannelMessageReactionAddEventHandler is an event handler for System Message Event (频道内用户添加 reaction).
type ChannelMessageReactionAddEventHandler func(*Session, *EventDataGeneral, *ChannelMessageReactionAdd)

// Type returns the event type for ChannelMessageReactionAdd (频道内用户添加 reaction)
func (eh ChannelMessageReactionAddEventHandler) Type() string {
	return "added_reaction"
}

// New returns a new instance of ChannelMessageReactionAdd (频道内用户添加 reaction).
func (eh ChannelMessageReactionAddEventHandler) New() interface{} {
	return &ChannelMessageReactionAdd{}
}

// Handle is the handler for ChannelMessageReactionAdd (频道内用户添加 reaction).
func (eh ChannelMessageReactionAddEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*ChannelMessageReactionAdd); ok {
		eh(s, edg, t)
	}
}

// ChannelMessageReactionRemoveEventHandler is an event handler for System Message Event (频道内用户取消 reaction).
type ChannelMessageReactionRemoveEventHandler func(*Session, *EventDataGeneral, *ChannelMessageReactionRemove)

// Type returns the event type for ChannelMessageReactionRemove (频道内用户取消 reaction)
func (eh ChannelMessageReactionRemoveEventHandler) Type() string {
	return "deleted_reaction"
}

// New returns a new instance of ChannelMessageReactionRemove (频道内用户取消 reaction).
func (eh ChannelMessageReactionRemoveEventHandler) New() interface{} {
	return &ChannelMessageReactionRemove{}
}

// Handle is the handler for ChannelMessageReactionRemove (频道内用户取消 reaction).
func (eh ChannelMessageReactionRemoveEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*ChannelMessageReactionRemove); ok {
		eh(s, edg, t)
	}
}

// ChannelMessageRemoveEventHandler is an event handler for System Message Event (频道消息被删除).
type ChannelMessageRemoveEventHandler func(*Session, *EventDataGeneral, *ChannelMessageRemove)

// Type returns the event type for ChannelMessageRemove (频道消息被删除)
func (eh ChannelMessageRemoveEventHandler) Type() string {
	return "deleted_message"
}

// New returns a new instance of ChannelMessageRemove (频道消息被删除).
func (eh ChannelMessageRemoveEventHandler) New() interface{} {
	return &ChannelMessageRemove{}
}

// Handle is the handler for ChannelMessageRemove (频道消息被删除).
func (eh ChannelMessageRemoveEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*ChannelMessageRemove); ok {
		eh(s, edg, t)
	}
}

// ChannelMessageUpdateEventHandler is an event handler for System Message Event (频道消息更新).
type ChannelMessageUpdateEventHandler func(*Session, *EventDataGeneral, *ChannelMessageUpdate)

// Type returns the event type for ChannelMessageUpdate (频道消息更新)
func (eh ChannelMessageUpdateEventHandler) Type() string {
	return "updated_message"
}

// New returns a new instance of ChannelMessageUpdate (频道消息更新).
func (eh ChannelMessageUpdateEventHandler) New() interface{} {
	return &ChannelMessageUpdate{}
}

// Handle is the handler for ChannelMessageUpdate (频道消息更新).
func (eh ChannelMessageUpdateEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*ChannelMessageUpdate); ok {
		eh(s, edg, t)
	}
}

// ChannelRemoveEventHandler is an event handler for System Message Event (删除频道).
type ChannelRemoveEventHandler func(*Session, *EventDataGeneral, *ChannelRemove)

// Type returns the event type for ChannelRemove (删除频道)
func (eh ChannelRemoveEventHandler) Type() string {
	return "deleted_channel"
}

// New returns a new instance of ChannelRemove (删除频道).
func (eh ChannelRemoveEventHandler) New() interface{} {
	return &ChannelRemove{}
}

// Handle is the handler for ChannelRemove (删除频道).
func (eh ChannelRemoveEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*ChannelRemove); ok {
		eh(s, edg, t)
	}
}

// ChannelStickyMessageAddEventHandler is an event handler for System Message Event (新的频道置顶消息).
type ChannelStickyMessageAddEventHandler func(*Session, *EventDataGeneral, *ChannelStickyMessageAdd)

// Type returns the event type for ChannelStickyMessageAdd (新的频道置顶消息)
func (eh ChannelStickyMessageAddEventHandler) Type() string {
	return "pinned_message"
}

// New returns a new instance of ChannelStickyMessageAdd (新的频道置顶消息).
func (eh ChannelStickyMessageAddEventHandler) New() interface{} {
	return &ChannelStickyMessageAdd{}
}

// Handle is the handler for ChannelStickyMessageAdd (新的频道置顶消息).
func (eh ChannelStickyMessageAddEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*ChannelStickyMessageAdd); ok {
		eh(s, edg, t)
	}
}

// ChannelStickyMessageRemoveEventHandler is an event handler for System Message Event (取消频道置顶消息).
type ChannelStickyMessageRemoveEventHandler func(*Session, *EventDataGeneral, *ChannelStickyMessageRemove)

// Type returns the event type for ChannelStickyMessageRemove (取消频道置顶消息)
func (eh ChannelStickyMessageRemoveEventHandler) Type() string {
	return "unpinned_message"
}

// New returns a new instance of ChannelStickyMessageRemove (取消频道置顶消息).
func (eh ChannelStickyMessageRemoveEventHandler) New() interface{} {
	return &ChannelStickyMessageRemove{}
}

// Handle is the handler for ChannelStickyMessageRemove (取消频道置顶消息).
func (eh ChannelStickyMessageRemoveEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*ChannelStickyMessageRemove); ok {
		eh(s, edg, t)
	}
}

// ChannelUpdateEventHandler is an event handler for System Message Event (修改频道信息).
type ChannelUpdateEventHandler func(*Session, *EventDataGeneral, *ChannelUpdate)

// Type returns the event type for ChannelUpdate (修改频道信息)
func (eh ChannelUpdateEventHandler) Type() string {
	return "updated_channel"
}

// New returns a new instance of ChannelUpdate (修改频道信息).
func (eh ChannelUpdateEventHandler) New() interface{} {
	return &ChannelUpdate{}
}

// Handle is the handler for ChannelUpdate (修改频道信息).
func (eh ChannelUpdateEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*ChannelUpdate); ok {
		eh(s, edg, t)
	}
}

// GuildBlocklistAddEventHandler is an event handler for System Message Event (服务器封禁用户).
type GuildBlocklistAddEventHandler func(*Session, *EventDataGeneral, *GuildBlocklistAdd)

// Type returns the event type for GuildBlocklistAdd (服务器封禁用户)
func (eh GuildBlocklistAddEventHandler) Type() string {
	return "added_block_list"
}

// New returns a new instance of GuildBlocklistAdd (服务器封禁用户).
func (eh GuildBlocklistAddEventHandler) New() interface{} {
	return &GuildBlocklistAdd{}
}

// Handle is the handler for GuildBlocklistAdd (服务器封禁用户).
func (eh GuildBlocklistAddEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*GuildBlocklistAdd); ok {
		eh(s, edg, t)
	}
}

// GuildBlocklistRemoveEventHandler is an event handler for System Message Event (服务器取消封禁用户).
type GuildBlocklistRemoveEventHandler func(*Session, *EventDataGeneral, *GuildBlocklistRemove)

// Type returns the event type for GuildBlocklistRemove (服务器取消封禁用户)
func (eh GuildBlocklistRemoveEventHandler) Type() string {
	return "deleted_block_list"
}

// New returns a new instance of GuildBlocklistRemove (服务器取消封禁用户).
func (eh GuildBlocklistRemoveEventHandler) New() interface{} {
	return &GuildBlocklistRemove{}
}

// Handle is the handler for GuildBlocklistRemove (服务器取消封禁用户).
func (eh GuildBlocklistRemoveEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*GuildBlocklistRemove); ok {
		eh(s, edg, t)
	}
}

// GuildDeleteEventHandler is an event handler for System Message Event (服务器删除).
type GuildDeleteEventHandler func(*Session, *EventDataGeneral, *GuildDelete)

// Type returns the event type for GuildDelete (服务器删除)
func (eh GuildDeleteEventHandler) Type() string {
	return "deleted_guild"
}

// New returns a new instance of GuildDelete (服务器删除).
func (eh GuildDeleteEventHandler) New() interface{} {
	return &GuildDelete{}
}

// Handle is the handler for GuildDelete (服务器删除).
func (eh GuildDeleteEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*GuildDelete); ok {
		eh(s, edg, t)
	}
}

// GuildMemberAddEventHandler is an event handler for System Message Event (新成员加入服务器).
type GuildMemberAddEventHandler func(*Session, *EventDataGeneral, *GuildMemberAdd)

// Type returns the event type for GuildMemberAdd (新成员加入服务器)
func (eh GuildMemberAddEventHandler) Type() string {
	return "joined_guild"
}

// New returns a new instance of GuildMemberAdd (新成员加入服务器).
func (eh GuildMemberAddEventHandler) New() interface{} {
	return &GuildMemberAdd{}
}

// Handle is the handler for GuildMemberAdd (新成员加入服务器).
func (eh GuildMemberAddEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*GuildMemberAdd); ok {
		eh(s, edg, t)
	}
}

// GuildMemberOfflineEventHandler is an event handler for System Message Event (服务器成员下线).
type GuildMemberOfflineEventHandler func(*Session, *EventDataGeneral, *GuildMemberOffline)

// Type returns the event type for GuildMemberOffline (服务器成员下线)
func (eh GuildMemberOfflineEventHandler) Type() string {
	return "guild_member_offline"
}

// New returns a new instance of GuildMemberOffline (服务器成员下线).
func (eh GuildMemberOfflineEventHandler) New() interface{} {
	return &GuildMemberOffline{}
}

// Handle is the handler for GuildMemberOffline (服务器成员下线).
func (eh GuildMemberOfflineEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*GuildMemberOffline); ok {
		eh(s, edg, t)
	}
}

// GuildMemberOnlineEventHandler is an event handler for System Message Event (服务器成员上线).
type GuildMemberOnlineEventHandler func(*Session, *EventDataGeneral, *GuildMemberOnline)

// Type returns the event type for GuildMemberOnline (服务器成员上线)
func (eh GuildMemberOnlineEventHandler) Type() string {
	return "guild_member_online"
}

// New returns a new instance of GuildMemberOnline (服务器成员上线).
func (eh GuildMemberOnlineEventHandler) New() interface{} {
	return &GuildMemberOnline{}
}

// Handle is the handler for GuildMemberOnline (服务器成员上线).
func (eh GuildMemberOnlineEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*GuildMemberOnline); ok {
		eh(s, edg, t)
	}
}

// GuildMemberRemoveEventHandler is an event handler for System Message Event (服务器成员退出).
type GuildMemberRemoveEventHandler func(*Session, *EventDataGeneral, *GuildMemberRemove)

// Type returns the event type for GuildMemberRemove (服务器成员退出)
func (eh GuildMemberRemoveEventHandler) Type() string {
	return "joined_guild"
}

// New returns a new instance of GuildMemberRemove (服务器成员退出).
func (eh GuildMemberRemoveEventHandler) New() interface{} {
	return &GuildMemberRemove{}
}

// Handle is the handler for GuildMemberRemove (服务器成员退出).
func (eh GuildMemberRemoveEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*GuildMemberRemove); ok {
		eh(s, edg, t)
	}
}

// GuildMemberUpdateEventHandler is an event handler for System Message Event (服务器成员信息更新).
type GuildMemberUpdateEventHandler func(*Session, *EventDataGeneral, *GuildMemberUpdate)

// Type returns the event type for GuildMemberUpdate (服务器成员信息更新)
func (eh GuildMemberUpdateEventHandler) Type() string {
	return "updated_guild_member"
}

// New returns a new instance of GuildMemberUpdate (服务器成员信息更新).
func (eh GuildMemberUpdateEventHandler) New() interface{} {
	return &GuildMemberUpdate{}
}

// Handle is the handler for GuildMemberUpdate (服务器成员信息更新).
func (eh GuildMemberUpdateEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*GuildMemberUpdate); ok {
		eh(s, edg, t)
	}
}

// GuildRoleAddEventHandler is an event handler for System Message Event (服务器角色增加).
type GuildRoleAddEventHandler func(*Session, *EventDataGeneral, *GuildRoleAdd)

// Type returns the event type for GuildRoleAdd (服务器角色增加)
func (eh GuildRoleAddEventHandler) Type() string {
	return "added_role"
}

// New returns a new instance of GuildRoleAdd (服务器角色增加).
func (eh GuildRoleAddEventHandler) New() interface{} {
	return &GuildRoleAdd{}
}

// Handle is the handler for GuildRoleAdd (服务器角色增加).
func (eh GuildRoleAddEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*GuildRoleAdd); ok {
		eh(s, edg, t)
	}
}

// GuildRoleRemoveEventHandler is an event handler for System Message Event (服务器角色删除).
type GuildRoleRemoveEventHandler func(*Session, *EventDataGeneral, *GuildRoleRemove)

// Type returns the event type for GuildRoleRemove (服务器角色删除)
func (eh GuildRoleRemoveEventHandler) Type() string {
	return "deleted_role"
}

// New returns a new instance of GuildRoleRemove (服务器角色删除).
func (eh GuildRoleRemoveEventHandler) New() interface{} {
	return &GuildRoleRemove{}
}

// Handle is the handler for GuildRoleRemove (服务器角色删除).
func (eh GuildRoleRemoveEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*GuildRoleRemove); ok {
		eh(s, edg, t)
	}
}

// GuildRoleUpdateEventHandler is an event handler for System Message Event (服务器角色更新).
type GuildRoleUpdateEventHandler func(*Session, *EventDataGeneral, *GuildRoleUpdate)

// Type returns the event type for GuildRoleUpdate (服务器角色更新)
func (eh GuildRoleUpdateEventHandler) Type() string {
	return "updated_role"
}

// New returns a new instance of GuildRoleUpdate (服务器角色更新).
func (eh GuildRoleUpdateEventHandler) New() interface{} {
	return &GuildRoleUpdate{}
}

// Handle is the handler for GuildRoleUpdate (服务器角色更新).
func (eh GuildRoleUpdateEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*GuildRoleUpdate); ok {
		eh(s, edg, t)
	}
}

// GuildUpdateEventHandler is an event handler for System Message Event (服务器信息更新).
type GuildUpdateEventHandler func(*Session, *EventDataGeneral, *GuildUpdate)

// Type returns the event type for GuildUpdate (服务器信息更新)
func (eh GuildUpdateEventHandler) Type() string {
	return "updated_guild"
}

// New returns a new instance of GuildUpdate (服务器信息更新).
func (eh GuildUpdateEventHandler) New() interface{} {
	return &GuildUpdate{}
}

// Handle is the handler for GuildUpdate (服务器信息更新).
func (eh GuildUpdateEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*GuildUpdate); ok {
		eh(s, edg, t)
	}
}

// PrivateMessageReactionAddEventHandler is an event handler for System Message Event (私聊内用户添加 reaction).
type PrivateMessageReactionAddEventHandler func(*Session, *EventDataGeneral, *PrivateMessageReactionAdd)

// Type returns the event type for PrivateMessageReactionAdd (私聊内用户添加 reaction)
func (eh PrivateMessageReactionAddEventHandler) Type() string {
	return "private_added_reaction"
}

// New returns a new instance of PrivateMessageReactionAdd (私聊内用户添加 reaction).
func (eh PrivateMessageReactionAddEventHandler) New() interface{} {
	return &PrivateMessageReactionAdd{}
}

// Handle is the handler for PrivateMessageReactionAdd (私聊内用户添加 reaction).
func (eh PrivateMessageReactionAddEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*PrivateMessageReactionAdd); ok {
		eh(s, edg, t)
	}
}

// PrivateMessageReactionRemoveEventHandler is an event handler for System Message Event (私聊内用户取消 reaction).
type PrivateMessageReactionRemoveEventHandler func(*Session, *EventDataGeneral, *PrivateMessageReactionRemove)

// Type returns the event type for PrivateMessageReactionRemove (私聊内用户取消 reaction)
func (eh PrivateMessageReactionRemoveEventHandler) Type() string {
	return "private_deleted_reaction"
}

// New returns a new instance of PrivateMessageReactionRemove (私聊内用户取消 reaction).
func (eh PrivateMessageReactionRemoveEventHandler) New() interface{} {
	return &PrivateMessageReactionRemove{}
}

// Handle is the handler for PrivateMessageReactionRemove (私聊内用户取消 reaction).
func (eh PrivateMessageReactionRemoveEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*PrivateMessageReactionRemove); ok {
		eh(s, edg, t)
	}
}

// PrivateMessageRemoveEventHandler is an event handler for System Message Event (私聊消息被删除).
type PrivateMessageRemoveEventHandler func(*Session, *EventDataGeneral, *PrivateMessageRemove)

// Type returns the event type for PrivateMessageRemove (私聊消息被删除)
func (eh PrivateMessageRemoveEventHandler) Type() string {
	return "deleted_private_message"
}

// New returns a new instance of PrivateMessageRemove (私聊消息被删除).
func (eh PrivateMessageRemoveEventHandler) New() interface{} {
	return &PrivateMessageRemove{}
}

// Handle is the handler for PrivateMessageRemove (私聊消息被删除).
func (eh PrivateMessageRemoveEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*PrivateMessageRemove); ok {
		eh(s, edg, t)
	}
}

// PrivateMessageUpdateEventHandler is an event handler for System Message Event (私聊消息更新).
type PrivateMessageUpdateEventHandler func(*Session, *EventDataGeneral, *PrivateMessageUpdate)

// Type returns the event type for PrivateMessageUpdate (私聊消息更新)
func (eh PrivateMessageUpdateEventHandler) Type() string {
	return "updated_private_message"
}

// New returns a new instance of PrivateMessageUpdate (私聊消息更新).
func (eh PrivateMessageUpdateEventHandler) New() interface{} {
	return &PrivateMessageUpdate{}
}

// Handle is the handler for PrivateMessageUpdate (私聊消息更新).
func (eh PrivateMessageUpdateEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*PrivateMessageUpdate); ok {
		eh(s, edg, t)
	}
}

// UserUpdateEventHandler is an event handler for System Message Event (用户信息更新).
type UserUpdateEventHandler func(*Session, *EventDataGeneral, *UserUpdate)

// Type returns the event type for UserUpdate (用户信息更新)
func (eh UserUpdateEventHandler) Type() string {
	return "user_updated"
}

// New returns a new instance of UserUpdate (用户信息更新).
func (eh UserUpdateEventHandler) New() interface{} {
	return &UserUpdate{}
}

// Handle is the handler for UserUpdate (用户信息更新).
func (eh UserUpdateEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*UserUpdate); ok {
		eh(s, edg, t)
	}
}

// VoiceChannelMemberAddEventHandler is an event handler for System Message Event (用户加入语音频道).
type VoiceChannelMemberAddEventHandler func(*Session, *EventDataGeneral, *VoiceChannelMemberAdd)

// Type returns the event type for VoiceChannelMemberAdd (用户加入语音频道)
func (eh VoiceChannelMemberAddEventHandler) Type() string {
	return "joined_channel"
}

// New returns a new instance of VoiceChannelMemberAdd (用户加入语音频道).
func (eh VoiceChannelMemberAddEventHandler) New() interface{} {
	return &VoiceChannelMemberAdd{}
}

// Handle is the handler for VoiceChannelMemberAdd (用户加入语音频道).
func (eh VoiceChannelMemberAddEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*VoiceChannelMemberAdd); ok {
		eh(s, edg, t)
	}
}

// VoiceChannelMemberRemoveEventHandler is an event handler for System Message Event (用户退出语音频道).
type VoiceChannelMemberRemoveEventHandler func(*Session, *EventDataGeneral, *VoiceChannelMemberRemove)

// Type returns the event type for VoiceChannelMemberRemove (用户退出语音频道)
func (eh VoiceChannelMemberRemoveEventHandler) Type() string {
	return "exited_channel"
}

// New returns a new instance of VoiceChannelMemberRemove (用户退出语音频道).
func (eh VoiceChannelMemberRemoveEventHandler) New() interface{} {
	return &VoiceChannelMemberRemove{}
}

// Handle is the handler for VoiceChannelMemberRemove (用户退出语音频道).
func (eh VoiceChannelMemberRemoveEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*VoiceChannelMemberRemove); ok {
		eh(s, edg, t)
	}
}

// EventCardMessageEventHandler is an event handler for Common Message Event (Card消息).
type EventCardMessageEventHandler func(*Session, *EventDataGeneral, *EventCardMessage)

// Type returns the event type for EventCardMessage (Card消息).
func (eh EventCardMessageEventHandler) Type() string {
	return "10"
}

// New returns a new instance of EventCardMessage (Card消息).
func (eh EventCardMessageEventHandler) New() interface{} {
	return &EventCardMessage{}
}

// Handle is the handler for EventCardMessage (Card消息).
func (eh EventCardMessageEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*EventCardMessage); ok {
		eh(s, edg, t)
	}
}

// EventFileMessageEventHandler is an event handler for Common Message Event (文件消息).
type EventFileMessageEventHandler func(*Session, *EventDataGeneral, *EventFileMessage)

// Type returns the event type for EventFileMessage (文件消息).
func (eh EventFileMessageEventHandler) Type() string {
	return "4"
}

// New returns a new instance of EventFileMessage (文件消息).
func (eh EventFileMessageEventHandler) New() interface{} {
	return &EventFileMessage{}
}

// Handle is the handler for EventFileMessage (文件消息).
func (eh EventFileMessageEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*EventFileMessage); ok {
		eh(s, edg, t)
	}
}

// EventImageMessageEventHandler is an event handler for Common Message Event (图片消息).
type EventImageMessageEventHandler func(*Session, *EventDataGeneral, *EventImageMessage)

// Type returns the event type for EventImageMessage (图片消息).
func (eh EventImageMessageEventHandler) Type() string {
	return "2"
}

// New returns a new instance of EventImageMessage (图片消息).
func (eh EventImageMessageEventHandler) New() interface{} {
	return &EventImageMessage{}
}

// Handle is the handler for EventImageMessage (图片消息).
func (eh EventImageMessageEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*EventImageMessage); ok {
		eh(s, edg, t)
	}
}

// EventKMarkdownMessageEventHandler is an event handler for Common Message Event (KMarkdown消息).
type EventKMarkdownMessageEventHandler func(*Session, *EventDataGeneral, *EventKMarkdownMessage)

// Type returns the event type for EventKMarkdownMessage (KMarkdown消息).
func (eh EventKMarkdownMessageEventHandler) Type() string {
	return "9"
}

// New returns a new instance of EventKMarkdownMessage (KMarkdown消息).
func (eh EventKMarkdownMessageEventHandler) New() interface{} {
	return &EventKMarkdownMessage{}
}

// Handle is the handler for EventKMarkdownMessage (KMarkdown消息).
func (eh EventKMarkdownMessageEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*EventKMarkdownMessage); ok {
		eh(s, edg, t)
	}
}

// EventTextMessageEventHandler is an event handler for Common Message Event (文字消息).
type EventTextMessageEventHandler func(*Session, *EventDataGeneral, *EventTextMessage)

// Type returns the event type for EventTextMessage (文字消息).
func (eh EventTextMessageEventHandler) Type() string {
	return "1"
}

// New returns a new instance of EventTextMessage (文字消息).
func (eh EventTextMessageEventHandler) New() interface{} {
	return &EventTextMessage{}
}

// Handle is the handler for EventTextMessage (文字消息).
func (eh EventTextMessageEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*EventTextMessage); ok {
		eh(s, edg, t)
	}
}

// EventVideoMessageEventHandler is an event handler for Common Message Event (视频消息).
type EventVideoMessageEventHandler func(*Session, *EventDataGeneral, *EventVideoMessage)

// Type returns the event type for EventVideoMessage (视频消息).
func (eh EventVideoMessageEventHandler) Type() string {
	return "3"
}

// New returns a new instance of EventVideoMessage (视频消息).
func (eh EventVideoMessageEventHandler) New() interface{} {
	return &EventVideoMessage{}
}

// Handle is the handler for EventVideoMessage (视频消息).
func (eh EventVideoMessageEventHandler) Handle(s *Session, edg *EventDataGeneral, i interface{}) {
	if t, ok := i.(*EventVideoMessage); ok {
		eh(s, edg, t)
	}
}

func handlerForInterface(h interface{}) EventHandler {
	switch v := h.(type) {
	case func(*Session, *EventDataGeneral, *BotGuildAdd):
		return BotGuildAddEventHandler(v)
	case func(*Session, *EventDataGeneral, *BotGuildRemove):
		return BotGuildRemoveEventHandler(v)
	case func(*Session, *EventDataGeneral, *CardButtonClick):
		return CardButtonClickEventHandler(v)
	case func(*Session, *EventDataGeneral, *ChannelAdd):
		return ChannelAddEventHandler(v)
	case func(*Session, *EventDataGeneral, *ChannelMessageReactionAdd):
		return ChannelMessageReactionAddEventHandler(v)
	case func(*Session, *EventDataGeneral, *ChannelMessageReactionRemove):
		return ChannelMessageReactionRemoveEventHandler(v)
	case func(*Session, *EventDataGeneral, *ChannelMessageRemove):
		return ChannelMessageRemoveEventHandler(v)
	case func(*Session, *EventDataGeneral, *ChannelMessageUpdate):
		return ChannelMessageUpdateEventHandler(v)
	case func(*Session, *EventDataGeneral, *ChannelRemove):
		return ChannelRemoveEventHandler(v)
	case func(*Session, *EventDataGeneral, *ChannelStickyMessageAdd):
		return ChannelStickyMessageAddEventHandler(v)
	case func(*Session, *EventDataGeneral, *ChannelStickyMessageRemove):
		return ChannelStickyMessageRemoveEventHandler(v)
	case func(*Session, *EventDataGeneral, *ChannelUpdate):
		return ChannelUpdateEventHandler(v)
	case func(*Session, *EventDataGeneral, *GuildBlocklistAdd):
		return GuildBlocklistAddEventHandler(v)
	case func(*Session, *EventDataGeneral, *GuildBlocklistRemove):
		return GuildBlocklistRemoveEventHandler(v)
	case func(*Session, *EventDataGeneral, *GuildDelete):
		return GuildDeleteEventHandler(v)
	case func(*Session, *EventDataGeneral, *GuildMemberAdd):
		return GuildMemberAddEventHandler(v)
	case func(*Session, *EventDataGeneral, *GuildMemberOffline):
		return GuildMemberOfflineEventHandler(v)
	case func(*Session, *EventDataGeneral, *GuildMemberOnline):
		return GuildMemberOnlineEventHandler(v)
	case func(*Session, *EventDataGeneral, *GuildMemberRemove):
		return GuildMemberRemoveEventHandler(v)
	case func(*Session, *EventDataGeneral, *GuildMemberUpdate):
		return GuildMemberUpdateEventHandler(v)
	case func(*Session, *EventDataGeneral, *GuildRoleAdd):
		return GuildRoleAddEventHandler(v)
	case func(*Session, *EventDataGeneral, *GuildRoleRemove):
		return GuildRoleRemoveEventHandler(v)
	case func(*Session, *EventDataGeneral, *GuildRoleUpdate):
		return GuildRoleUpdateEventHandler(v)
	case func(*Session, *EventDataGeneral, *GuildUpdate):
		return GuildUpdateEventHandler(v)
	case func(*Session, *EventDataGeneral, *PrivateMessageReactionAdd):
		return PrivateMessageReactionAddEventHandler(v)
	case func(*Session, *EventDataGeneral, *PrivateMessageReactionRemove):
		return PrivateMessageReactionRemoveEventHandler(v)
	case func(*Session, *EventDataGeneral, *PrivateMessageRemove):
		return PrivateMessageRemoveEventHandler(v)
	case func(*Session, *EventDataGeneral, *PrivateMessageUpdate):
		return PrivateMessageUpdateEventHandler(v)
	case func(*Session, *EventDataGeneral, *UserUpdate):
		return UserUpdateEventHandler(v)
	case func(*Session, *EventDataGeneral, *VoiceChannelMemberAdd):
		return VoiceChannelMemberAddEventHandler(v)
	case func(*Session, *EventDataGeneral, *VoiceChannelMemberRemove):
		return VoiceChannelMemberRemoveEventHandler(v)
	case func(*Session, *EventDataGeneral, *EventCardMessage):
		return EventCardMessageEventHandler(v)
	case func(*Session, *EventDataGeneral, *EventFileMessage):
		return EventFileMessageEventHandler(v)
	case func(*Session, *EventDataGeneral, *EventImageMessage):
		return EventImageMessageEventHandler(v)
	case func(*Session, *EventDataGeneral, *EventKMarkdownMessage):
		return EventKMarkdownMessageEventHandler(v)
	case func(*Session, *EventDataGeneral, *EventTextMessage):
		return EventTextMessageEventHandler(v)
	case func(*Session, *EventDataGeneral, *EventVideoMessage):
		return EventVideoMessageEventHandler(v)
	}
	return nil
}

func init() {
	registerSystemEventHandler(BotGuildAddEventHandler(nil))
	registerSystemEventHandler(BotGuildRemoveEventHandler(nil))
	registerSystemEventHandler(CardButtonClickEventHandler(nil))
	registerSystemEventHandler(ChannelAddEventHandler(nil))
	registerSystemEventHandler(ChannelMessageReactionAddEventHandler(nil))
	registerSystemEventHandler(ChannelMessageReactionRemoveEventHandler(nil))
	registerSystemEventHandler(ChannelMessageRemoveEventHandler(nil))
	registerSystemEventHandler(ChannelMessageUpdateEventHandler(nil))
	registerSystemEventHandler(ChannelRemoveEventHandler(nil))
	registerSystemEventHandler(ChannelStickyMessageAddEventHandler(nil))
	registerSystemEventHandler(ChannelStickyMessageRemoveEventHandler(nil))
	registerSystemEventHandler(ChannelUpdateEventHandler(nil))
	registerSystemEventHandler(GuildBlocklistAddEventHandler(nil))
	registerSystemEventHandler(GuildBlocklistRemoveEventHandler(nil))
	registerSystemEventHandler(GuildDeleteEventHandler(nil))
	registerSystemEventHandler(GuildMemberAddEventHandler(nil))
	registerSystemEventHandler(GuildMemberOfflineEventHandler(nil))
	registerSystemEventHandler(GuildMemberOnlineEventHandler(nil))
	registerSystemEventHandler(GuildMemberRemoveEventHandler(nil))
	registerSystemEventHandler(GuildMemberUpdateEventHandler(nil))
	registerSystemEventHandler(GuildRoleAddEventHandler(nil))
	registerSystemEventHandler(GuildRoleRemoveEventHandler(nil))
	registerSystemEventHandler(GuildRoleUpdateEventHandler(nil))
	registerSystemEventHandler(GuildUpdateEventHandler(nil))
	registerSystemEventHandler(PrivateMessageReactionAddEventHandler(nil))
	registerSystemEventHandler(PrivateMessageReactionRemoveEventHandler(nil))
	registerSystemEventHandler(PrivateMessageRemoveEventHandler(nil))
	registerSystemEventHandler(PrivateMessageUpdateEventHandler(nil))
	registerSystemEventHandler(UserUpdateEventHandler(nil))
	registerSystemEventHandler(VoiceChannelMemberAddEventHandler(nil))
	registerSystemEventHandler(VoiceChannelMemberRemoveEventHandler(nil))
	registerMessageEventHandler(EventCardMessageEventHandler(nil))
	registerMessageEventHandler(EventFileMessageEventHandler(nil))
	registerMessageEventHandler(EventImageMessageEventHandler(nil))
	registerMessageEventHandler(EventKMarkdownMessageEventHandler(nil))
	registerMessageEventHandler(EventTextMessageEventHandler(nil))
	registerMessageEventHandler(EventVideoMessageEventHandler(nil))
}
